// ==========================================================================
// SECTION PATTERNS
// ==========================================================================

// SECTION Color
// --------------------------------------------------------------------------

/// Tint color
/// @group utility
/// @param {color} $color - color to be tinted
/// @param {number(%)} $percentage - key to extract value of
/// @return `$color` mixed with white by `$percentage`
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}
/// Shade color
/// @group utility
/// @param {color} $color - color to be shaded
/// @param {number(%)} $percentage - key to extract value of
/// @return `$color` mixed with black by `$percentage`
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

/// configuration of color scale
/// @group color
/// 500 is the base color, higher numbers are mixed with black, lower numbers are mixed with white
$color-scale: (
  050: 90%,
  100: 80%,
  200: 60%,
  300: 40%,
  400: 20%,
  500: 0%,
  600: 20%,
  700: 40%,
  800: 60%,
  900: 80%
) !default;

/// Generates tint or shade of color input
/// @group utility
/// @requires shade()
/// @requires tint()
/// @requires $color-scale
/// @param {color} $color [black] - color to be manipulated
/// @param {$color-scale.key} $level - level of the color
/// @see $color-scale
/// @return manipulated color
@function c($color: black, $level: null) {
  @if $level >= 600 {
    $scale: map-get( $color-scale, $level );
    @return shade( $color, $scale );
  }
  @else if $level <= 400 {
    $scale: map-get( $color-scale, $level );
    @return tint( $color, $scale );
  }
  @else {
    @return $color;
  }
}

// END !SECTION Color
//  SECTION Fonts
// --------------------------------------------------------------------------
/// Sets the font weights to use numbers from font family
/// @group typography
/// @type map
///   map properties are X00 value of font weight according to font used, or
///   font weight keyword as used in CSS
$font-weights: (
  body: (
    thin: 100,
    normal: 400,
    bold: 600,
    black: 700
  ),
  head: (
    thin: 300,
    normal: 400,
    bold: 600,
    black: bold
  ),
  mono: (
    thin: normal,
    normal: normal,
    bold: bold,
    black: bold
  )
) !default;

/// Default header weight
/// @group typography
/// @type string [normal]
$header-weight: normal !default;

/// Gets weight value for font based on `$font-weights`
/// @group typography
/// @requires $font-weights
/// @requires map-deep-get
/// @param {keyword (thin, normal, bold, black)} $weight [normal]
///   The desired weight of the font
/// @param {keyword (body, head, mono)} $font [body]
///   The text font
/// @output {string} font-weight: value from `$font-weights` matching both params
/// @example
///   @include weight(bold, head);
@mixin weight($weight: normal, $font: body) {
  font-weight: deep-map-get($font-weights, $font, $weight);
}

// End !SECTION Fonts
//  SECTION Styles
// --------------------------------------------------------------------------

// TEMP Old header style mixin
// @mixin header-style($size: null, $margin: true) {
//   @if $margin == true {
//     margin: 0 0 $header-bottom;
//   }
//   @if $size != null {
//     @include type-setting($size);
//   }
//   @include weight($header-weight, head);
//   font-family: $font-head;
//   color: $c-header;
// }

// TEMP: Old link style mixin
// @mixin link-style($theme: null, $hover: false) {
//   @if $hover == true {
//     @if $theme == alert {
//       background-color: c($c-red, 200);
//       border-color: $c-red;
//     }
//     @else if $theme == mute {
//       background-color: initial;
//       border-color: c($stone, 100);
//     }
//     @else {
//       background-color: c($c-primary, 100);
//       border-color: $c-primary;
//     }
//   }
//   @else {
//     @if $theme == alert {
//       border-bottom: 2px solid $c-red;
//     }
//     @else if $theme == mute {
//       color: white;
//       border-bottom: 2px solid c($stone, 400);
//     }
//     @else {
//       border-bottom: 2px solid c($c-primary, 200);
//     }
//   }
// }

// TEMP: Old hover mixin
// @mixin hover {
//   border-color: $c-primary;
//   box-shadow: 0 0 0 1px $c-primary;
//   background-color: c( $c-primary, 100 );
//   color: black;
// }

// TEMP: Old card style mixin
// @mixin card-styles {
//   border: $bdr-width solid black;
//   border-radius: $bdr-radius;
//   padding: $block-padding;
// }

@mixin block-margin {
  margin: 0 0 s(1) 0;
}

// End !SECTION Styles
//  SECTION Reset
// --------------------------------------------------------------------------
@mixin reset($properties...) {
  @for $i from 0 to length($properties) {
    @if nth($properties, $i + 1) == margin {
      margin: 0;
    }
    @if nth($properties, $i + 1) == padding {
      padding: 0;
    }
    @if nth($properties, $i + 1) == border {
      border: 0;
    }
    @if nth($properties, $i + 1) == float {
      float: none;
    }
    @if nth($properties, $i + 1) == font-size {
      font-size: inherit;
    }
    @if nth($properties, $i + 1) == font-weight {
      font-weight: normal;
    }
    @if nth($properties, $i + 1) == color {
      color: inherit;
    }
    @if nth($properties, $i + 1) == background {
      background: none;
      background-color: transparent;
      background-image: none;
    }
    @if nth($properties, $i + 1) == shadow {
      text-shadow: none;
      -webkit-box-shadow: none;
      -moz-box-shadow: none;
      box-shadow: none;
    }
    @if nth($properties, $i + 1) == transition {
      -webkit-transition-property: none;
      -moz-transition-property: none;
      -o-transition-property: none;
      transition-property: none;
    }
  }
}
// End !SECTION Reset
// End !SECTION PATTERNS
