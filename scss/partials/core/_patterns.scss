// TYPOGRAPHY

@mixin header-margin {
  margin: $header-top 0 $header-bottom 0;
}

@mixin header-style($weight: null, $margin: false) {
  @if $margin == true {
    @include header-margin;
  }
  @if $weight != null {
    @include type-setting($weight);
  }
  font-weight: $header-weight;
  font-family: $font-head;
}

@mixin type-setting($input) {
  $size: type-scale( $input );
  font-size: #{$size + 'rem'};
  line-height: #{line-height( $size ) + 'rem'};
}

@mixin weight($weight: normal, $font: body) {
  @if $font == body {
    @if $weight == thin {
      font-weight: $font-body-thin;
    }
    @else if $weight == bold {
      font-weight: $font-body-bold;
    }
    @else if $weight == black {
      font-weight: $font-body-black;
    }
    @else {
      font-weight: $font-body-normal;
    }
  }
  @else if $font == head {
    @if $weight == thin {
      font-weight: $font-head-thin;
    }
    @else if $weight == bold {
      font-weight: $font-head-bold;
    }
    @else if $weight == black {
      font-weight: $font-head-black;
    }
    @else {
      font-weight: $font-head-normal;
    }
  }
  @else {
    font-weight: $weight;
  }
}

//SPACING
// BLOCK LEVEL ELEMENTS

@mixin block-margin {
  margin-bottom: $block-margin;
}

@mixin card-styles {
  @include border();
  padding: $block-padding;
}

@mixin list-margin {
  margin-bottom: $list-margin;
}

// SECTION

@mixin section-space($bg: false, $full: false) {
  @if $bg {
    margin: $section-margin 0;
    @if $full {
      padding: $section-padding 0;
    }
    @else {
      padding: $section-padding-small;
    }
  }
  @else {
    margin: $section-margin 0;
  }
}

// BORDER

@mixin border($width: $bdr-width, $color: black, $radius: $bdr-radius, $style: solid) {
  @if $width == none {
    border: 0 solid transparent;
  }
  @if $width == radius or $color == radius {
    border-radius: $bdr-radius;
  }
  @else {
    @if $radius == none {
      border-radius: 0;
    }
    @else {
      @if $radius != omit {
        border-radius: $radius;
      }
    }
    border: $width $style $color;
  }
}

// LINKS

@mixin link-style($hover: false, $hover-bg: c( $c-primary, 100), $hover-bdr: $c-primary, $border: c( $c-primary, 300 )) {
  @if $hover == true {
    background-color: $hover-bg;
    border-color: $hover-bdr;
  }
  @else {
    border-bottom: 2px solid $border;
  }
}

// BUTTONS

@mixin button-primary {
  color: white;
  background: $c-primary;
  @include border( $color: $c-primary );
}

@mixin button($pri: false) {
  @if $pri == true {
    @include button-primary;
  }
  @else {
    @include border( $color: c( $stone, 800 ) );
    color: c( $stone, 800 );
    background: white;
  }
  @include type-setting(0);
  padding: $input-padding;
  text-align: center;
  white-space: nowrap;
  box-sizing: border-box;
  text-transform: uppercase;
  font-size: 90%;
}
@mixin button-hover {
  outline: 0;
  text-decoration: none;
  border-color: $c-primary;
  box-shadow: 0 0 0 1px $c-primary;
  background: c( $c-primary, 100 );
  color: black;
}

// MISC

@mixin breakpoint($size) {
  @media all and (min-width: map-get($breakpoints, $size)) {
    @content;
  }
}

// RESET

@mixin reset($properties...) {
  @for $i from 0 to length($properties) {
    @if nth($properties, $i + 1) == margin {
      margin: 0;
    }
    @if nth($properties, $i + 1) == padding {
      padding: 0;
    }
    @if nth($properties, $i + 1) == border {
      border: 0;
    }
    @if nth($properties, $i + 1) == float {
      float: none;
    }
    @if nth($properties, $i + 1) == font-size {
      font-size: inherit;
    }
    @if nth($properties, $i + 1) == font-weight {
      font-weight: normal;
    }
    @if nth($properties, $i + 1) == color {
      color: inherit;
    }
    @if nth($properties, $i + 1) == background {
      background: none;
      background-color: transparent;
      background-image: none;
    }
    @if nth($properties, $i + 1) == shadow {
      text-shadow: none;
      -webkit-box-shadow: none;
      -moz-box-shadow: none;
      box-shadow: none;
    }
    @if nth($properties, $i + 1) == transition {
      -webkit-transition-property: none;
      -moz-transition-property: none;
      -o-transition-property: none;
      transition-property: none;
    }
  }
}
