// --------------------------------------------------------------
// Mixins
// --------------------------------------------------------------

/// Clearfix for floated containers, used as a bugfix
/// @group utility
@mixin clearfix {
  &::after {
    content: '';
    visibility: hidden;
    display: block;
    font-size: 0;
    height: 0;
    clear: both;
  }
}

/// Shorthand for the position property
/// Use null to skipa side. $position can not be null.
/// includes quick option to make the element cover its parent
/// @group utility
/// @argument {$position, $top, $right, $bottom, $left} - List of position property values; accepts CSS shorthand.
/// @param {string | keyword(cover)} $position - value for position property
/// @param {number} $top - value for top property
/// @param {number} $right [$top] - value for right property
/// @param {number} $bottom [$top] - value for bottom property
/// @param {number} $left [$right] - value for the left property
@mixin position($position, $top: null, $right: $top, $bottom: $top, $left: $right) {
  @if $position == null {
    @error "`#{$position}` is not a valid value for the `$position` argument in " +
           "the `position` mixin. Must be either `cover` or a string to be passed to the position property.";
  }
  @else if $position == cover {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
  } @else {
    position: $position;
    @if $top != null { top: $top;}
    @if $right != null { right: $right; }
    @if $bottom != null { bottom: $bottom; }
    @if $left != null { left: $left;}
  }
}

// ----------------------------------------------------
// BORDERS
// ----------------------------------------------------

/// Shorthand for the directional border-radius properties
/// Use null to skip a corner
/// @group utility
/// @argument {$top-left, $top-right, $bottom-right, $bottom-left} - List of border radii; accepts CSS shorthand.
/// @param {number(with-unit)} $top-left - border-top-left-radius
/// @param {number(with-unit)} $top-right [$top-left] - border-top-right-radius
/// @param {number(with-unit)} $bottom-right [$top-left] - border-bottom-right-radius
/// @param {number(with-unit)} $bottom-left [$bottom-right] - border-bottom-left-radius
/// @example scss
///   .element {
///     @include border-radius(4px, 0px, 4px, 0px);
///   }
///
///   // CSS Output
///   .element {
///     border-top-left-radius: 4px;
///     border-top-right-radius: 0px;
///     border-bottom-right-radius: 4px;
///     border-bottom-left-radius: 0px;
///   }
@mixin border-radius($top-left: null, $top-right: $top-left, $bottom-right: $top-left, $bottom-left: $bottom-right) {
  @if $top-left == $top-right == $bottom-right == $bottom-left {
    border-radius: $top-left;
  } @else {
    @if $top-left != null { border-top-left-radius: $top-left; }
    @if $top-right != null { border-top-right-radius: $top-right; }
    @if $bottom-right != null { border-bottom-right-radius: $bottom-right; }
    @if $bottom-left != null { border-bottom-left-radius: $bottom-left; }
  }
}

/// Shorthand for the directional border-style properties
/// Use null to skip a side
/// @group utility
/// @argument {$top, $right, $bottom, $left} - List of border styles; accepts CSS shorthand.
/// @param {string} $top - border-top-style
/// @param {string} $right [$top] - border-right-style
/// @param {string} $bottom [$top] - border-bottom-style
/// @param {string} $left [$right] - border-left-style
/// @example scss
///   .element {
///     @include border-style(solid, dotted);
///   }
///
///   // CSS Output
///   .element {
///     border-top-style: solid;
///     border-right-style: dotted;
///     border-bottom-style: solid;
///     border-left-style: dotted;
///   }
@mixin border-style($top: null, $right: $top, $bottom: $top, $left: $right) {
  @if $top == $right == $bottom == $left {
    border-style: $top;
  } @else {
    @if $top != null { border-top-style: $top; }
    @if $right != null { border-right-style: $right; }
    @if $bottom != null { border-bottom-style: $bottom; }
    @if $left != null { border-left-style: $left; }
  }
}

/// Shorthand for the directional border-color properties
/// Use null to skip a side
/// @group utility
/// @argument {$top, $right, $bottom, $left} - List of border colors; accepts CSS shorthand.
/// @param {color} $top - border-top-color
/// @param {color} $right [$top] - border-right-color
/// @param {color} $bottom [$top] - border-bottom-color
/// @param {color} $left [$right] - border-left-color
/// @example scss
///   .element {
///     @include border-color(blue, green, yellow);
///   }
///
///   // CSS Output
///   .element {
///     border-top-color: blue;
///     border-right-color: green;
///     border-bottom-color: yellow;
///     border-left-color: green;
///   }
@mixin border-color($top: null, $right: $top, $bottom: $top, $left: $right) {
  @if $top == $right == $bottom == $left {
    border-color: $top;
  } @else {
    @if $top != null { border-top-color: $top; }
    @if $right != null { border-right-color: $right; }
    @if $bottom != null { border-bottom-color: $bottom; }
    @if $left != null { border-left-color: $left; }
  }
}

/// Shorthand for the directional border-width properties
/// Use null to skip a side
/// @group utility
/// @argument {$top, $right, $bottom, $left} - List of border widths; accepts CSS shorthand.
/// @param {number(with-unit} $top - border-top-width
/// @param {number(with-unit} $right [$top] - border-right-width
/// @param {number(with-unit} $bottom [$top] - border-bottom-width
/// @param {number(with-unit} $left [$right] - border-left-width
/// @example scss
///   .element {
///     @include border-width(1px, 2px, 3px);
///   }
///
///   // CSS Output
///   .element {
///     border-top-width: 1px;
///     border-right-width: 2px;
///     border-bottom-width: 3px;
///     border-left-width: 2px;
///   }
@mixin border-width($top: null, $right: $top, $bottom: $top, $left: $right) {
  @if $top == $right == $bottom == $left {
    border-width: $top;
  } @else {
    @if $top != null { border-top-width: $top; }
    @if $right != null { border-right-width: $right; }
    @if $bottom != null { border-bottom-width: $bottom; }
    @if $left != null { border-left-width: $left; }
  }
}

// ----------------------------------------------------
// PADDING & MARGIN
// ----------------------------------------------------

/// Shorthand for the directional padding properties
/// Use null to skip a side
/// @group utility
/// @argument {$top, $right, $bottom, $left} - List of paddings; accepts CSS shorthand.
/// @param {number(with-unit} $top - padding-top
/// @param {number(with-unit} $right [$top] - padding-right
/// @param {number(with-unit} $bottom [$top] - padding-bottom
/// @param {number(with-unit} $left [$right] - padding-left
/// @example scss
///   .element {
///     @include padding(null, 1px, 2px);
///   }
///
///   // CSS Output
///   .element {
///     padding-right: 1px;
///     padding-bottom: 2px;
///     padding-left: 1px;
///   }
@mixin padding($top: null, $right: $top, $bottom: $top, $left: $right) {
  @if $top == $right == $bottom == $left {
    padding: $top;
  } @else {
    @if $top != null { padding-top: $top; }
    @if $right != null { padding-right: $right; }
    @if $bottom != null { padding-bottom: $bottom; }
    @if $left != null { padding-left: $left; }
  }
}

/// Shorthand for the directional margin properties
/// Use null to skip a side
/// @group utility
/// @argument {$top, $right, $bottom, $left} - List of margins; accepts CSS shorthand.
/// @param {number(with-unit} $top - margin-top
/// @param {number(with-unit} $right [$top] - margin-right
/// @param {number(with-unit} $bottom [$top] - margin-bottom
/// @param {number(with-unit} $left [$right] - margin-left
/// @example scss
///   .element {
///     @include margin(null, 1px, 2px);
///   }
///
///   // CSS Output
///   .element {
///     margin-right: 1px;
///     margin-bottom: 2px;
///     margin-left: 1px;
///   }
@mixin margin($top: null, $right: $top, $bottom: $top, $left: $right) {
  @if $top == $right == $bottom == $left {
    margin: $top;
  } @else {
    @if $top != null { margin-top: $top; }
    @if $right != null { margin-right: $right; }
    @if $bottom != null { margin-bottom: $bottom; }
    @if $left != null { margin-left: $left; }
  }
}

// ----------------------------------------------------
// Timing Functions
// ----------------------------------------------------

/// CSS cubic-bezier timing functions.
/// @link https://goo.gl/p8u6SK
/// @type string
$ease-in-quad: cubic-bezier(0.55, 0.085, 0.68, 0.53);
$ease-in-cubic: cubic-bezier(0.55, 0.055, 0.675, 0.19);
$ease-in-quart: cubic-bezier(0.895, 0.03, 0.685, 0.22);
$ease-in-quint: cubic-bezier(0.755, 0.05, 0.855, 0.06);
$ease-in-sine: cubic-bezier(0.47, 0, 0.745, 0.715);
$ease-in-expo: cubic-bezier(0.95, 0.05, 0.795, 0.035);
$ease-in-circ: cubic-bezier(0.6, 0.04, 0.98, 0.335);
$ease-in-back: cubic-bezier(0.6, -0.28, 0.735, 0.045);

$ease-out-quad: cubic-bezier(0.25, 0.46, 0.45, 0.94);
$ease-out-cubic: cubic-bezier(0.215, 0.61, 0.355, 1);
$ease-out-quart: cubic-bezier(0.165, 0.84, 0.44, 1);
$ease-out-quint: cubic-bezier(0.23, 1, 0.32, 1);
$ease-out-sine: cubic-bezier(0.39, 0.575, 0.565, 1);
$ease-out-expo: cubic-bezier(0.19, 1, 0.22, 1);
$ease-out-circ: cubic-bezier(0.075, 0.82, 0.165, 1);
$ease-out-back: cubic-bezier(0.175, 0.885, 0.32, 1.275);

$ease-in-out-quad: cubic-bezier(0.455, 0.03, 0.515, 0.955);
$ease-in-out-cubic: cubic-bezier(0.645, 0.045, 0.355, 1);
$ease-in-out-quart: cubic-bezier(0.77, 0, 0.175, 1);
$ease-in-out-quint: cubic-bezier(0.86, 0, 0.07, 1);
$ease-in-out-sine: cubic-bezier(0.445, 0.05, 0.55, 0.95);
$ease-in-out-expo: cubic-bezier(1, 0, 0, 1);
$ease-in-out-circ: cubic-bezier(0.785, 0.135, 0.15, 0.86);
$ease-in-out-back: cubic-bezier(0.68, -0.55, 0.265, 1.55);

// ----------------------------------------------------
// MEDIA QUERIES
// ----------------------------------------------------

/// Screen sizes to use for break points
/// @group responsive
/// @type map | number(px)
$breakpoints: (
  xxl: 2560px,
  xl: 1440px,
  lg: 1024px,
  md: 761px,
  sm: 760px,
  xs: 300px
) !default;

/// Media Query Mixin
/// @group responsive
/// @requires $breakpoints
/// @param {string} $size - key from $breakpoints map
@mixin breakpoint($size) {
  @media all and (min-width: map-get($breakpoints, $size)) {
    @content;
  }
}