// --------------------------------------------------------------
// Links
// @requires _functions.scss
// --------------------------------------------------------------

$rem-size: 10 !default; // Integer(px)
$ratio: 1.25 !default; // Number 1.25 = major third
$init-txt-size: 16 !default; // Integer(px)
$init-line-height: 1.6 !default; // Number

$txt-size: $init-txt-size / $rem-size; //converts raw value to "rem"
$line-height: $init-txt-size * $init-line-height / $rem-size; //converts raw value to "rem"

/// Calculates line height for input text size
/// @group typography
/// @param {number (unitless)} $size - input text size (rem)
/// @return number >= `$size`
@function line-height($size) {
  $value: $line-height;
  $i: 1;
  @while $value < $size {
    $value: $line-height * $i;
    $i: $i + 0.5;
  }
  @return $value;
}

// ----------------------------------------------------
// TYPE SCALE
// ----------------------------------------------------

/// Sets the font sizes to a step on the type scale
/// @see type-scale
/// @see $ratio
/// @group typography
/// @type map | integers
$font-sizes: (
  large: 6,
  h1: 5,
  h2: 4,
  h3: 3,
  h4: 2,
  h5: 1,
  h6: 0,
  p: 0,
  sm: -1
) !default;

/// Calculates font size from scale steps
/// @group typography
/// @requires $ratio
/// @requires $font-sizes
/// @requires $txt-size
/// @param {number (unitless) | keyword (large, h1, h2, h3, h4, h5, h6, p, sm)} $scale
///   Number denotes step on the stype scale, use keyword to match font scale to that key in $font-sizes
/// @return
///   {number (unitless)} $txt-size * pow( $ratio, $scale )
///   this unitless number needs to be given the 'rem' unit in use
/// @example
///   font-size: #{type-scale( h1 ) + 'rem'};
/// @see type-setting
@function type-scale($scale) {
  $level: null;
  // Gets numerical level from the font sizes map
  @if type-of($scale) == 'string' {
    $level: map-get( $font-sizes, $scale );
  }
  @else {
    $level: $scale;
  }
  // Passes the numerical scale to the function to calculate font size
  @if $level == 0 {
    @return $txt-size;
  }
  @else if $level <= -0.1 {
    // remove negative from number, division does this for us
    $nlevel: $level * -1;
    @return $txt-size / pow( $ratio, $nlevel );
  }
  @else {
    @return $txt-size * pow( $ratio, $level );
  }
}

// ----------------------------------------------------
// TYPESETTING
// ----------------------------------------------------

/// Combines font size and line height for the input scale
/// @group typography
/// @requires type-scale
/// @requires line-height
/// @param {number (unitless) | keyword (large, h1, h2, h3, h4, h5, h6, p, sm)} $input
///   Number denotes step on the stype scale, use keyword to match font scale to that key in $font-sizes
/// @output
///   font-size: #{$size + 'rem'};
///   line-height: #{line-height( $size ) + 'rem'};
@mixin type-setting($input) {
  $size: type-scale( $input );
  font-size: #{$size + 'rem'};
  line-height: #{line-height( $size ) + 'rem'};
}

// ----------------------------------------------------
// FONTS
// ----------------------------------------------------

/// Sets the font for body text
/// @group typography
/// @type string | keyword(serif, sans-serif, monospace, cursive, system-ui) [sans-serif]
$font-body: sans-serif !default;

/// Sets the font for header text
/// @group typography
/// @type string | keyword(serif, sans-serif, monospace, cursive, system-ui) [serif]
$font-head: serif !default;

/// Sets the font for monospace text
/// @group typography
/// @type string | keyword(serif, sans-serif, monospace, cursive, system-ui) [monospace]
$font-mono: monospace !default;

/// Sets the icon font
/// @group typography
/// @type string [null]
$font-icon: null !default;
